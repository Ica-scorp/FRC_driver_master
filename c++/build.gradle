plugins {
    id "cpp"
	id 'maven-publish'
    id "edu.wpi.first.GradleRIO" version "2019.1.1"
}

def includeSrcInIncludeRoot = false

def baseArchiveName = 'adis16448'

task headersZip(type: Zip) {
    destinationDir = file("build/zips")
    baseName = baseArchiveName
    classifier = "headers"

    from('src/main/include') {
        into '/'
    }
}
task zipSharedLibrary(type: Zip){
	destinationDir = file("build/zips")
    baseName = baseArchiveName
    classifier = "linuxathenashared" 
    from('build/libs/adis16448imu/shared/release/') {
        into '/linux/athena/shared'
    }
}
task zipStaticLibrary(type: Zip){
	destinationDir = file("build/zips")
    baseName = baseArchiveName
    classifier = "linuxathenastatic"
    from('build/libs/adis16448imu/static/release/') {
        into '/linux/athena/static'
    }
}
task zipSharedLibraryDebug(type: Zip){
	destinationDir = file("build/zips")
    baseName = baseArchiveName
    classifier = "linuxathenashareddebug" 
    from('build/libs/adis16448imu/shared/debug/') {
        into '/linux/athena/shared'
    }
}
task zipStaticLibraryDebug(type: Zip){
	destinationDir = file("build/zips")
    baseName = baseArchiveName
    classifier = "linuxathenastaticdebug"
    from('build/libs/adis16448imu/static/debug/') {
        into '/linux/athena/static'
    }
}

// Make sure build completes before trying to make a zip of the built libraries
zipSharedLibrary.dependsOn build
zipStaticLibrary.dependsOn build
zipSharedLibraryDebug.dependsOn build
zipStaticLibraryDebug.dependsOn build
headersZip.dependsOn build

model {
    components {
        adis16448imu(NativeLibrarySpec) {
            targetPlatform wpi.platforms.roborio
            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                    if (includeSrcInIncludeRoot) {
                        srcDir 'src/main/cpp'
                    }
                }
            }

            // Defining my dependencies. In this case, WPILib
            useLibrary(it, "wpilib")
        }
    }
	publishing {
        publications {
            cpp(MavenPublication) {
                artifact zipSharedLibrary
				artifact zipStaticLibrary
                artifact headersZip
				artifact zipSharedLibraryDebug
				artifact zipStaticLibraryDebug
                artifactId = "adis16448-cpp"
                groupId publishGroup
                version libVersion
            }
        }
    }
}